syntax = "proto3";

package objectstore;

// Object Writer Protocol

message ReceiveObjectRequest {
  bytes object_id = 1;
  int64 object_size = 2;
  int64 offset = 3;
}

message ReceiveReducedObjectRequest {
  bytes reduction_id = 1;
  int64 object_size = 2;
  int64 offset = 3;
}

message ObjectWriterRequest {
  oneof message_type {
    ReceiveObjectRequest receive_object = 1;
    ReceiveReducedObjectRequest receive_reduced_object = 2;
  }
}

// Notification Protocol

message BarrierRequest {
  int32 num_of_nodes = 1;
}

message BarrierReply {
}

message WriteLocationRequest {
  bytes object_id = 1;
  bytes sender_ip = 2;
  bool finished = 3;
  uint64 object_size = 4;
  oneof has_inband_data {
    bytes inband_data = 5;
  }
}

message WriteLocationReply {
  bool ok = 1;
}

message GetLocationSyncRequest {
  bytes object_id = 1;
  bool occupying = 2;
  bytes receiver_ip = 3;
}

message GetLocationSyncReply {
  bytes sender_ip = 1;
  uint64 object_size = 2;
  bytes inband_data = 3;
}

// broadcast fault tolerance API

message HandlePullObjectFailureRequest {
  bytes object_id = 1;
  bytes receiver_ip = 2;
}

message HandlePullObjectFailureReply {
  bytes alternative_sender_ip = 1;
  bool success = 2;
}

// reduce API

message PullAndReduceObjectRequest {
  bytes reduction_id = 1;
  bool is_tree_branch = 2;  // Is the receiver a tree branch node?
  bytes sender_ip = 3;
  bool from_left_child = 4;
  bytes object_id_to_reduce = 5;  // The ObjectID of the receiver.
  bytes object_id_to_pull = 6;  // The ObjectID of the sender.
  int64 object_size = 7;
  bool is_sender_leaf = 8;  // Is the sender a leaf node?
  bool reset_progress = 9;  // reset the progress (for error handling)
}

message PullAndReduceObjectReply {
}

message ReduceInbandObjectRequest {
  bytes reduction_id = 1;
  bytes inband_data = 2;
}

message ReduceInbandObjectReply {
}

message CreateReduceTaskRequest {
  bytes reduce_dst = 1;
  repeated bytes objects_to_reduce = 2;
  bytes reduction_id = 3;
  int32 num_reduce_objects = 4;
}

message CreateReduceTaskReply {
}

message HandleReceiveReducedObjectFailureRequest {
  bytes reduction_id = 1;
  bytes receiver_ip = 2;
  bytes sender_ip = 3;
}

message HandleReceiveReducedObjectFailureReply {
}

// Object Control Protocol
message GetReducedObjectsRequest {
  bytes reduction_id = 1;
}

message GetReducedObjectsReply {
  repeated bytes object_ids = 2;
}

// other API

message ConnectRequest {
  bytes sender_ip = 1;
}

message ConnectReply {}

message ConnectListenerRequest {}

message ConnectListenerReply {}

message ExitRequest {
  bytes ip = 1;
}

message ExitReply {
  bool ok = 1;
}

service NotificationServer {
  rpc Barrier(BarrierRequest) returns (BarrierReply);
  rpc Exit(ExitRequest) returns (ExitReply);
  rpc Connect(ConnectRequest) returns (ConnectReply);
  rpc WriteLocation(WriteLocationRequest) returns (WriteLocationReply);
  rpc GetLocationSync(GetLocationSyncRequest) returns (GetLocationSyncReply);
  rpc HandlePullObjectFailure(HandlePullObjectFailureRequest) returns (HandlePullObjectFailureReply);
  rpc HandleReceiveReducedObjectFailure(HandleReceiveReducedObjectFailureRequest) returns (HandleReceiveReducedObjectFailureReply);
  rpc CreateReduceTask(CreateReduceTaskRequest) returns (CreateReduceTaskReply);
  rpc GetReducedObjects(GetReducedObjectsRequest) returns (GetReducedObjectsReply);
}

service NotificationListener {
  rpc ConnectListener(ConnectListenerRequest) returns (ConnectListenerReply);
  rpc PullAndReduceObject(PullAndReduceObjectRequest) returns (PullAndReduceObjectReply);
  rpc ReduceInbandObject(ReduceInbandObjectRequest) returns (ReduceInbandObjectReply);
}
