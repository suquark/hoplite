// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: object_store.proto

#include "object_store.pb.h"
#include "object_store.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace objectstore {

static const char* NotificationServer_method_names[] = {
  "/objectstore.NotificationServer/Barrier",
  "/objectstore.NotificationServer/Exit",
  "/objectstore.NotificationServer/Connect",
  "/objectstore.NotificationServer/WriteLocation",
  "/objectstore.NotificationServer/GetLocationSync",
  "/objectstore.NotificationServer/HandlePullObjectFailure",
  "/objectstore.NotificationServer/HandleReceiveReducedObjectFailure",
  "/objectstore.NotificationServer/CreateReduceTask",
  "/objectstore.NotificationServer/GetReducedObjects",
};

std::unique_ptr< NotificationServer::Stub> NotificationServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NotificationServer::Stub> stub(new NotificationServer::Stub(channel));
  return stub;
}

NotificationServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Barrier_(NotificationServer_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Exit_(NotificationServer_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Connect_(NotificationServer_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WriteLocation_(NotificationServer_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLocationSync_(NotificationServer_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HandlePullObjectFailure_(NotificationServer_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HandleReceiveReducedObjectFailure_(NotificationServer_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateReduceTask_(NotificationServer_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetReducedObjects_(NotificationServer_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NotificationServer::Stub::Barrier(::grpc::ClientContext* context, const ::objectstore::BarrierRequest& request, ::objectstore::BarrierReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Barrier_, context, request, response);
}

void NotificationServer::Stub::experimental_async::Barrier(::grpc::ClientContext* context, const ::objectstore::BarrierRequest* request, ::objectstore::BarrierReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Barrier_, context, request, response, std::move(f));
}

void NotificationServer::Stub::experimental_async::Barrier(::grpc::ClientContext* context, const ::objectstore::BarrierRequest* request, ::objectstore::BarrierReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Barrier_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::objectstore::BarrierReply>* NotificationServer::Stub::PrepareAsyncBarrierRaw(::grpc::ClientContext* context, const ::objectstore::BarrierRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::objectstore::BarrierReply>::Create(channel_.get(), cq, rpcmethod_Barrier_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::objectstore::BarrierReply>* NotificationServer::Stub::AsyncBarrierRaw(::grpc::ClientContext* context, const ::objectstore::BarrierRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBarrierRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NotificationServer::Stub::Exit(::grpc::ClientContext* context, const ::objectstore::ExitRequest& request, ::objectstore::ExitReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Exit_, context, request, response);
}

void NotificationServer::Stub::experimental_async::Exit(::grpc::ClientContext* context, const ::objectstore::ExitRequest* request, ::objectstore::ExitReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Exit_, context, request, response, std::move(f));
}

void NotificationServer::Stub::experimental_async::Exit(::grpc::ClientContext* context, const ::objectstore::ExitRequest* request, ::objectstore::ExitReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Exit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::objectstore::ExitReply>* NotificationServer::Stub::PrepareAsyncExitRaw(::grpc::ClientContext* context, const ::objectstore::ExitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::objectstore::ExitReply>::Create(channel_.get(), cq, rpcmethod_Exit_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::objectstore::ExitReply>* NotificationServer::Stub::AsyncExitRaw(::grpc::ClientContext* context, const ::objectstore::ExitRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NotificationServer::Stub::Connect(::grpc::ClientContext* context, const ::objectstore::ConnectRequest& request, ::objectstore::ConnectReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Connect_, context, request, response);
}

void NotificationServer::Stub::experimental_async::Connect(::grpc::ClientContext* context, const ::objectstore::ConnectRequest* request, ::objectstore::ConnectReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, std::move(f));
}

void NotificationServer::Stub::experimental_async::Connect(::grpc::ClientContext* context, const ::objectstore::ConnectRequest* request, ::objectstore::ConnectReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::objectstore::ConnectReply>* NotificationServer::Stub::PrepareAsyncConnectRaw(::grpc::ClientContext* context, const ::objectstore::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::objectstore::ConnectReply>::Create(channel_.get(), cq, rpcmethod_Connect_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::objectstore::ConnectReply>* NotificationServer::Stub::AsyncConnectRaw(::grpc::ClientContext* context, const ::objectstore::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConnectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NotificationServer::Stub::WriteLocation(::grpc::ClientContext* context, const ::objectstore::WriteLocationRequest& request, ::objectstore::WriteLocationReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_WriteLocation_, context, request, response);
}

void NotificationServer::Stub::experimental_async::WriteLocation(::grpc::ClientContext* context, const ::objectstore::WriteLocationRequest* request, ::objectstore::WriteLocationReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WriteLocation_, context, request, response, std::move(f));
}

void NotificationServer::Stub::experimental_async::WriteLocation(::grpc::ClientContext* context, const ::objectstore::WriteLocationRequest* request, ::objectstore::WriteLocationReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_WriteLocation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::objectstore::WriteLocationReply>* NotificationServer::Stub::PrepareAsyncWriteLocationRaw(::grpc::ClientContext* context, const ::objectstore::WriteLocationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::objectstore::WriteLocationReply>::Create(channel_.get(), cq, rpcmethod_WriteLocation_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::objectstore::WriteLocationReply>* NotificationServer::Stub::AsyncWriteLocationRaw(::grpc::ClientContext* context, const ::objectstore::WriteLocationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWriteLocationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NotificationServer::Stub::GetLocationSync(::grpc::ClientContext* context, const ::objectstore::GetLocationSyncRequest& request, ::objectstore::GetLocationSyncReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetLocationSync_, context, request, response);
}

void NotificationServer::Stub::experimental_async::GetLocationSync(::grpc::ClientContext* context, const ::objectstore::GetLocationSyncRequest* request, ::objectstore::GetLocationSyncReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLocationSync_, context, request, response, std::move(f));
}

void NotificationServer::Stub::experimental_async::GetLocationSync(::grpc::ClientContext* context, const ::objectstore::GetLocationSyncRequest* request, ::objectstore::GetLocationSyncReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLocationSync_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::objectstore::GetLocationSyncReply>* NotificationServer::Stub::PrepareAsyncGetLocationSyncRaw(::grpc::ClientContext* context, const ::objectstore::GetLocationSyncRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::objectstore::GetLocationSyncReply>::Create(channel_.get(), cq, rpcmethod_GetLocationSync_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::objectstore::GetLocationSyncReply>* NotificationServer::Stub::AsyncGetLocationSyncRaw(::grpc::ClientContext* context, const ::objectstore::GetLocationSyncRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLocationSyncRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NotificationServer::Stub::HandlePullObjectFailure(::grpc::ClientContext* context, const ::objectstore::HandlePullObjectFailureRequest& request, ::objectstore::HandlePullObjectFailureReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_HandlePullObjectFailure_, context, request, response);
}

void NotificationServer::Stub::experimental_async::HandlePullObjectFailure(::grpc::ClientContext* context, const ::objectstore::HandlePullObjectFailureRequest* request, ::objectstore::HandlePullObjectFailureReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_HandlePullObjectFailure_, context, request, response, std::move(f));
}

void NotificationServer::Stub::experimental_async::HandlePullObjectFailure(::grpc::ClientContext* context, const ::objectstore::HandlePullObjectFailureRequest* request, ::objectstore::HandlePullObjectFailureReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_HandlePullObjectFailure_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::objectstore::HandlePullObjectFailureReply>* NotificationServer::Stub::PrepareAsyncHandlePullObjectFailureRaw(::grpc::ClientContext* context, const ::objectstore::HandlePullObjectFailureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::objectstore::HandlePullObjectFailureReply>::Create(channel_.get(), cq, rpcmethod_HandlePullObjectFailure_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::objectstore::HandlePullObjectFailureReply>* NotificationServer::Stub::AsyncHandlePullObjectFailureRaw(::grpc::ClientContext* context, const ::objectstore::HandlePullObjectFailureRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHandlePullObjectFailureRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NotificationServer::Stub::HandleReceiveReducedObjectFailure(::grpc::ClientContext* context, const ::objectstore::HandleReceiveReducedObjectFailureRequest& request, ::objectstore::HandleReceiveReducedObjectFailureReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_HandleReceiveReducedObjectFailure_, context, request, response);
}

void NotificationServer::Stub::experimental_async::HandleReceiveReducedObjectFailure(::grpc::ClientContext* context, const ::objectstore::HandleReceiveReducedObjectFailureRequest* request, ::objectstore::HandleReceiveReducedObjectFailureReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_HandleReceiveReducedObjectFailure_, context, request, response, std::move(f));
}

void NotificationServer::Stub::experimental_async::HandleReceiveReducedObjectFailure(::grpc::ClientContext* context, const ::objectstore::HandleReceiveReducedObjectFailureRequest* request, ::objectstore::HandleReceiveReducedObjectFailureReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_HandleReceiveReducedObjectFailure_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::objectstore::HandleReceiveReducedObjectFailureReply>* NotificationServer::Stub::PrepareAsyncHandleReceiveReducedObjectFailureRaw(::grpc::ClientContext* context, const ::objectstore::HandleReceiveReducedObjectFailureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::objectstore::HandleReceiveReducedObjectFailureReply>::Create(channel_.get(), cq, rpcmethod_HandleReceiveReducedObjectFailure_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::objectstore::HandleReceiveReducedObjectFailureReply>* NotificationServer::Stub::AsyncHandleReceiveReducedObjectFailureRaw(::grpc::ClientContext* context, const ::objectstore::HandleReceiveReducedObjectFailureRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHandleReceiveReducedObjectFailureRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NotificationServer::Stub::CreateReduceTask(::grpc::ClientContext* context, const ::objectstore::CreateReduceTaskRequest& request, ::objectstore::CreateReduceTaskReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateReduceTask_, context, request, response);
}

void NotificationServer::Stub::experimental_async::CreateReduceTask(::grpc::ClientContext* context, const ::objectstore::CreateReduceTaskRequest* request, ::objectstore::CreateReduceTaskReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateReduceTask_, context, request, response, std::move(f));
}

void NotificationServer::Stub::experimental_async::CreateReduceTask(::grpc::ClientContext* context, const ::objectstore::CreateReduceTaskRequest* request, ::objectstore::CreateReduceTaskReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateReduceTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::objectstore::CreateReduceTaskReply>* NotificationServer::Stub::PrepareAsyncCreateReduceTaskRaw(::grpc::ClientContext* context, const ::objectstore::CreateReduceTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::objectstore::CreateReduceTaskReply>::Create(channel_.get(), cq, rpcmethod_CreateReduceTask_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::objectstore::CreateReduceTaskReply>* NotificationServer::Stub::AsyncCreateReduceTaskRaw(::grpc::ClientContext* context, const ::objectstore::CreateReduceTaskRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateReduceTaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NotificationServer::Stub::GetReducedObjects(::grpc::ClientContext* context, const ::objectstore::GetReducedObjectsRequest& request, ::objectstore::GetReducedObjectsReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetReducedObjects_, context, request, response);
}

void NotificationServer::Stub::experimental_async::GetReducedObjects(::grpc::ClientContext* context, const ::objectstore::GetReducedObjectsRequest* request, ::objectstore::GetReducedObjectsReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetReducedObjects_, context, request, response, std::move(f));
}

void NotificationServer::Stub::experimental_async::GetReducedObjects(::grpc::ClientContext* context, const ::objectstore::GetReducedObjectsRequest* request, ::objectstore::GetReducedObjectsReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetReducedObjects_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::objectstore::GetReducedObjectsReply>* NotificationServer::Stub::PrepareAsyncGetReducedObjectsRaw(::grpc::ClientContext* context, const ::objectstore::GetReducedObjectsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::objectstore::GetReducedObjectsReply>::Create(channel_.get(), cq, rpcmethod_GetReducedObjects_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::objectstore::GetReducedObjectsReply>* NotificationServer::Stub::AsyncGetReducedObjectsRaw(::grpc::ClientContext* context, const ::objectstore::GetReducedObjectsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetReducedObjectsRaw(context, request, cq);
  result->StartCall();
  return result;
}

NotificationServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NotificationServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NotificationServer::Service, ::objectstore::BarrierRequest, ::objectstore::BarrierReply>(
          [](NotificationServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::objectstore::BarrierRequest* req,
             ::objectstore::BarrierReply* resp) {
               return service->Barrier(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NotificationServer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NotificationServer::Service, ::objectstore::ExitRequest, ::objectstore::ExitReply>(
          [](NotificationServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::objectstore::ExitRequest* req,
             ::objectstore::ExitReply* resp) {
               return service->Exit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NotificationServer_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NotificationServer::Service, ::objectstore::ConnectRequest, ::objectstore::ConnectReply>(
          [](NotificationServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::objectstore::ConnectRequest* req,
             ::objectstore::ConnectReply* resp) {
               return service->Connect(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NotificationServer_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NotificationServer::Service, ::objectstore::WriteLocationRequest, ::objectstore::WriteLocationReply>(
          [](NotificationServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::objectstore::WriteLocationRequest* req,
             ::objectstore::WriteLocationReply* resp) {
               return service->WriteLocation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NotificationServer_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NotificationServer::Service, ::objectstore::GetLocationSyncRequest, ::objectstore::GetLocationSyncReply>(
          [](NotificationServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::objectstore::GetLocationSyncRequest* req,
             ::objectstore::GetLocationSyncReply* resp) {
               return service->GetLocationSync(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NotificationServer_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NotificationServer::Service, ::objectstore::HandlePullObjectFailureRequest, ::objectstore::HandlePullObjectFailureReply>(
          [](NotificationServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::objectstore::HandlePullObjectFailureRequest* req,
             ::objectstore::HandlePullObjectFailureReply* resp) {
               return service->HandlePullObjectFailure(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NotificationServer_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NotificationServer::Service, ::objectstore::HandleReceiveReducedObjectFailureRequest, ::objectstore::HandleReceiveReducedObjectFailureReply>(
          [](NotificationServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::objectstore::HandleReceiveReducedObjectFailureRequest* req,
             ::objectstore::HandleReceiveReducedObjectFailureReply* resp) {
               return service->HandleReceiveReducedObjectFailure(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NotificationServer_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NotificationServer::Service, ::objectstore::CreateReduceTaskRequest, ::objectstore::CreateReduceTaskReply>(
          [](NotificationServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::objectstore::CreateReduceTaskRequest* req,
             ::objectstore::CreateReduceTaskReply* resp) {
               return service->CreateReduceTask(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NotificationServer_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NotificationServer::Service, ::objectstore::GetReducedObjectsRequest, ::objectstore::GetReducedObjectsReply>(
          [](NotificationServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::objectstore::GetReducedObjectsRequest* req,
             ::objectstore::GetReducedObjectsReply* resp) {
               return service->GetReducedObjects(ctx, req, resp);
             }, this)));
}

NotificationServer::Service::~Service() {
}

::grpc::Status NotificationServer::Service::Barrier(::grpc::ServerContext* context, const ::objectstore::BarrierRequest* request, ::objectstore::BarrierReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NotificationServer::Service::Exit(::grpc::ServerContext* context, const ::objectstore::ExitRequest* request, ::objectstore::ExitReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NotificationServer::Service::Connect(::grpc::ServerContext* context, const ::objectstore::ConnectRequest* request, ::objectstore::ConnectReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NotificationServer::Service::WriteLocation(::grpc::ServerContext* context, const ::objectstore::WriteLocationRequest* request, ::objectstore::WriteLocationReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NotificationServer::Service::GetLocationSync(::grpc::ServerContext* context, const ::objectstore::GetLocationSyncRequest* request, ::objectstore::GetLocationSyncReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NotificationServer::Service::HandlePullObjectFailure(::grpc::ServerContext* context, const ::objectstore::HandlePullObjectFailureRequest* request, ::objectstore::HandlePullObjectFailureReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NotificationServer::Service::HandleReceiveReducedObjectFailure(::grpc::ServerContext* context, const ::objectstore::HandleReceiveReducedObjectFailureRequest* request, ::objectstore::HandleReceiveReducedObjectFailureReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NotificationServer::Service::CreateReduceTask(::grpc::ServerContext* context, const ::objectstore::CreateReduceTaskRequest* request, ::objectstore::CreateReduceTaskReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NotificationServer::Service::GetReducedObjects(::grpc::ServerContext* context, const ::objectstore::GetReducedObjectsRequest* request, ::objectstore::GetReducedObjectsReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* NotificationListener_method_names[] = {
  "/objectstore.NotificationListener/ConnectListener",
  "/objectstore.NotificationListener/PullAndReduceObject",
  "/objectstore.NotificationListener/ReduceInbandObject",
};

std::unique_ptr< NotificationListener::Stub> NotificationListener::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NotificationListener::Stub> stub(new NotificationListener::Stub(channel));
  return stub;
}

NotificationListener::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ConnectListener_(NotificationListener_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PullAndReduceObject_(NotificationListener_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReduceInbandObject_(NotificationListener_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NotificationListener::Stub::ConnectListener(::grpc::ClientContext* context, const ::objectstore::ConnectListenerRequest& request, ::objectstore::ConnectListenerReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ConnectListener_, context, request, response);
}

void NotificationListener::Stub::experimental_async::ConnectListener(::grpc::ClientContext* context, const ::objectstore::ConnectListenerRequest* request, ::objectstore::ConnectListenerReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ConnectListener_, context, request, response, std::move(f));
}

void NotificationListener::Stub::experimental_async::ConnectListener(::grpc::ClientContext* context, const ::objectstore::ConnectListenerRequest* request, ::objectstore::ConnectListenerReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ConnectListener_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::objectstore::ConnectListenerReply>* NotificationListener::Stub::PrepareAsyncConnectListenerRaw(::grpc::ClientContext* context, const ::objectstore::ConnectListenerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::objectstore::ConnectListenerReply>::Create(channel_.get(), cq, rpcmethod_ConnectListener_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::objectstore::ConnectListenerReply>* NotificationListener::Stub::AsyncConnectListenerRaw(::grpc::ClientContext* context, const ::objectstore::ConnectListenerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConnectListenerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NotificationListener::Stub::PullAndReduceObject(::grpc::ClientContext* context, const ::objectstore::PullAndReduceObjectRequest& request, ::objectstore::PullAndReduceObjectReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PullAndReduceObject_, context, request, response);
}

void NotificationListener::Stub::experimental_async::PullAndReduceObject(::grpc::ClientContext* context, const ::objectstore::PullAndReduceObjectRequest* request, ::objectstore::PullAndReduceObjectReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PullAndReduceObject_, context, request, response, std::move(f));
}

void NotificationListener::Stub::experimental_async::PullAndReduceObject(::grpc::ClientContext* context, const ::objectstore::PullAndReduceObjectRequest* request, ::objectstore::PullAndReduceObjectReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PullAndReduceObject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::objectstore::PullAndReduceObjectReply>* NotificationListener::Stub::PrepareAsyncPullAndReduceObjectRaw(::grpc::ClientContext* context, const ::objectstore::PullAndReduceObjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::objectstore::PullAndReduceObjectReply>::Create(channel_.get(), cq, rpcmethod_PullAndReduceObject_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::objectstore::PullAndReduceObjectReply>* NotificationListener::Stub::AsyncPullAndReduceObjectRaw(::grpc::ClientContext* context, const ::objectstore::PullAndReduceObjectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPullAndReduceObjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NotificationListener::Stub::ReduceInbandObject(::grpc::ClientContext* context, const ::objectstore::ReduceInbandObjectRequest& request, ::objectstore::ReduceInbandObjectReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ReduceInbandObject_, context, request, response);
}

void NotificationListener::Stub::experimental_async::ReduceInbandObject(::grpc::ClientContext* context, const ::objectstore::ReduceInbandObjectRequest* request, ::objectstore::ReduceInbandObjectReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReduceInbandObject_, context, request, response, std::move(f));
}

void NotificationListener::Stub::experimental_async::ReduceInbandObject(::grpc::ClientContext* context, const ::objectstore::ReduceInbandObjectRequest* request, ::objectstore::ReduceInbandObjectReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ReduceInbandObject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::objectstore::ReduceInbandObjectReply>* NotificationListener::Stub::PrepareAsyncReduceInbandObjectRaw(::grpc::ClientContext* context, const ::objectstore::ReduceInbandObjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::objectstore::ReduceInbandObjectReply>::Create(channel_.get(), cq, rpcmethod_ReduceInbandObject_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::objectstore::ReduceInbandObjectReply>* NotificationListener::Stub::AsyncReduceInbandObjectRaw(::grpc::ClientContext* context, const ::objectstore::ReduceInbandObjectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReduceInbandObjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

NotificationListener::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NotificationListener_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NotificationListener::Service, ::objectstore::ConnectListenerRequest, ::objectstore::ConnectListenerReply>(
          [](NotificationListener::Service* service,
             ::grpc::ServerContext* ctx,
             const ::objectstore::ConnectListenerRequest* req,
             ::objectstore::ConnectListenerReply* resp) {
               return service->ConnectListener(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NotificationListener_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NotificationListener::Service, ::objectstore::PullAndReduceObjectRequest, ::objectstore::PullAndReduceObjectReply>(
          [](NotificationListener::Service* service,
             ::grpc::ServerContext* ctx,
             const ::objectstore::PullAndReduceObjectRequest* req,
             ::objectstore::PullAndReduceObjectReply* resp) {
               return service->PullAndReduceObject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NotificationListener_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NotificationListener::Service, ::objectstore::ReduceInbandObjectRequest, ::objectstore::ReduceInbandObjectReply>(
          [](NotificationListener::Service* service,
             ::grpc::ServerContext* ctx,
             const ::objectstore::ReduceInbandObjectRequest* req,
             ::objectstore::ReduceInbandObjectReply* resp) {
               return service->ReduceInbandObject(ctx, req, resp);
             }, this)));
}

NotificationListener::Service::~Service() {
}

::grpc::Status NotificationListener::Service::ConnectListener(::grpc::ServerContext* context, const ::objectstore::ConnectListenerRequest* request, ::objectstore::ConnectListenerReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NotificationListener::Service::PullAndReduceObject(::grpc::ServerContext* context, const ::objectstore::PullAndReduceObjectRequest* request, ::objectstore::PullAndReduceObjectReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NotificationListener::Service::ReduceInbandObject(::grpc::ServerContext* context, const ::objectstore::ReduceInbandObjectRequest* request, ::objectstore::ReduceInbandObjectReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace objectstore

